// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id Int @id @default(autoincrement())
  visibiltity String[]
  role_name String @db.VarChar(100)
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())

  user User[]

  @@map("roles")
}

model User {
  id    Int     @id @default(autoincrement())
  username  String @unique
  password String  
  roleId Int
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())

  role Role @relation(fields: [roleId], references: [id])
  cart Cart[]
  order Order[]

  @@map("users")
}

model Item {
  id Int @id @default(autoincrement())
  item_name String @db.VarChar(200)
  price Int 
  
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())

  cart Cart[]

  @@map("items")
}

model Cart {
  id Int @id @default(autoincrement())
  status String
  user_id Int
  item_id Int
  count Int
  order_id String? 

  
  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())

  item Item @relation(fields: [item_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
  order Order? @relation(fields: [order_id], references: [id])
  @@map("carts")
}

model Order {
  id      String @unique 
  user_id Int
  status  String

  is_deleted Boolean @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  cart Cart[]

  @@map("orders")
}